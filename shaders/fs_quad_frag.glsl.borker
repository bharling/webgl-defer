  precision mediump float;
  
  uniform sampler2D depthTexture;
  uniform sampler2D normalsTexture;
  uniform sampler2D albedoTexture;
  
  //uniform vec4 projectionParams;
  uniform mat4 inverseProjectionMatrix;
  uniform mat4 uViewMatrix;

  // Directional Light
  uniform vec3 lightPosition;
  uniform vec3 lightColor;
  
  varying vec2 vTexCoords;
  
  //uniform int DEBUG;
  
  varying float debug;
  
  #define PI 3.1415926535897932384626433832795
  
  vec3 reconstructViewSpacePosition( float p_depth, vec2 p_ndc ) {
  
  	// these coords are uvs eg bottom left is 0,0
  	//p_ndc = p_ndc * 2.0 - 1.0;
  	float x = p_ndc.x * 2.0 - 1.0;
    float y = (1.0 - p_ndc.y) * 2.0 - 1.0;
    vec4 vProjectedPos = vec4(x, y, p_depth, 1.0);
    // Transform by the inverse projection matrix
    vec4 vPositionVS = vProjectedPos * inverseProjectionMatrix;  
    // Divide by w to get the view-space position
    return vPositionVS.xyz / vPositionVS.w;  
  	
  	
  }
  
  /*float chiGGX ( float v ) {
  	return v > 0.0 ? 1.0 : 0.0;
  }

  float GGX_Distribution( vec3 n, vec3 h, float alpha ) {
  	float NoH = dot(n,h);
  	float alpha2 = alpha * alpha;
  	float NoH2 = NoH * NoH;
  	float den = NoH2 * alpha2 + (1.0-NoH2);
  	return (chiGGX(NoH) * alpha2) / (PI * den * den);
  }

  vec3 Fresnel_Schlick(float dotvh, vec3 F0) {
    return F0 + (1.0-F0) * pow(1.0 - dotvh, 5.0);
  }

  float GGX_PartialGeometryTerm(vec3 v, vec3 n, vec3 h, float alpha) {
    float VoH2 = saturate(dot(v,h));
    float chi = chiGGX(VoH2 / saturate(dot(v,n)));
    VoH2 = VoH2 * VoH2;
    float tan2 = (1.0 - VoH2) / VoH2;
    return (chi * 2.0) / (1.0  + sqrt(1.0 + alpha * alpha * tan2));
  }*/
  
  vec3 decodeNormal ( vec4 enc ) {
  	vec4 nn = enc*vec4(2.0,2.0,0.0,0.0) + vec4(-1.0, -1.0, 1.0, -1.0);
  	float l = dot(nn.xyz, -nn.xyw);
  	nn.z = l;
  	nn.xy *= sqrt(l);
  	return nn.xyz * 2.0 + vec3(0.0,0.0,-1.0);
  }
  
  float decodeDepth( vec4 rgba ) {
  	// return dot( rgba, vec4( 1.0, 1.0/255.0, 1.0/65025.0, 1.0/160581375.0) );
    return rgba.r;
  }

  float saturate( float val ) {
    return clamp(val, 0.0, 1.0);
  }


  vec4 cook_torrance (vec3 normal, vec3 viewer, vec3 light, float roughness_value, vec3 diffuse) {
    //return vec4(1.0,0.0,0.0,0.0);
    float ref_at_normal_incidence = 0.2;

    vec3 half_vector = normalize( light + viewer );
    float NdotL        = saturate( dot( normal, light ) );
    float NdotH        = saturate( dot( normal, half_vector ) );
    float NdotV        = saturate( dot( normal, viewer ) );
    float VdotH        = saturate( dot( viewer, half_vector ) );
    float r_sq         = roughness_value * roughness_value;



    float geo_numerator   = 2.0 * NdotH;
    float geo_denominator = VdotH;
 
    float geo_b = (geo_numerator * NdotV ) / geo_denominator;
    float geo_c = (geo_numerator * NdotL ) / geo_denominator;
    float geo   = min( 1.0, min( geo_b, geo_c ) );

    float roughness;

    float roughness_a = 1.0 / ( 4.0 * r_sq * pow( NdotH, 4.0 ) );
    float roughness_b = NdotH * NdotH - 1.0;
    float roughness_c = r_sq * NdotH * NdotH;

    roughness = roughness_a * exp( roughness_b / roughness_c );

    float fresnel = pow(1.0 - VdotH, 5.0);
    fresnel *= ( 1.0 - ref_at_normal_incidence );
    fresnel += ref_at_normal_incidence;

    vec3 Rs_numerator = vec3(fresnel * geo * roughness);
    float Rs_denominator = NdotV * NdotL;
    vec3 Rs = Rs_numerator/Rs_denominator;

    vec3 final = max(0.0, NdotL) * (vec3(0.1,0.1,0.1) * Rs + diffuse );

    return vec4(final, 1.0);

  }
  
  void main (void) {
  	
  	float DEBUG = floor(debug);
  	
  	const vec3 specularColor = vec3(1.0);
  	const float specularExponent = 15.0;
  	
  	
  	
    vec4 depthSample = texture2D(depthTexture, vTexCoords);
    
    if (DEBUG == 1.0) {
    	gl_FragColor = vec4(depthSample.xyz, 1.0);
    	return;
    }
    
    
    vec4 normalsSample = texture2D(normalsTexture, vTexCoords);

    float metalness = normalsSample.z;
    float roughness = normalsSample.w;
    
    if (DEBUG == 2.0) {
    	gl_FragColor = normalsSample;
    	return;
    }
    
    vec3 matColor = texture2D( albedoTexture, vTexCoords).xyz;
    matColor = pow ( matColor, vec3(2.2));
    
    if (DEBUG == 3.0) {
    	gl_FragColor = vec4(matColor, 1.0);
    	return;
    }
    
    float decodedDepth = decodeDepth(depthSample);
    
    if (DEBUG == 4.0) {
    	gl_FragColor = vec4(decodedDepth, decodedDepth, decodedDepth, 1.0);
    	return;
    }
    
    
    vec3 decodedNormal = vec3(normalsSample.xyz) * 2.0 - 1.0; //decodeNormal(  normalsSample );
    
    if (DEBUG == 5.0) {
    	gl_FragColor = vec4(decodedNormal,1.0);
    	return;
    }
    
    
    vec3 viewPosition = reconstructViewSpacePosition( depthSample.r, vTexCoords );
    
    if (DEBUG == 6.0) {
    	gl_FragColor = vec4((viewPosition), 1.0);
    	return;
    }

    gl_FragColor = cook_torrance( decodedNormal, -viewPosition, lightPosition, 0.8, matColor );

  }